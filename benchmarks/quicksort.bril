# following section copied from here:
# https://github.com/sampsyo/bril/blob/92625c7/benchmarks/mat-mul.bril#L1-L57

# The MIT License
#
# Copyright (c) 2019 Cornell University
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Use a linear congruential generator to generate random numbers.
# `seq` is the state of the random number generator.
# Returns a value between 0 and max
@rand(seq: ptr<int>, max: int) : int {
  a: int = const 25214903917;
  c: int = const 11;
  m: int = const 281474976710656;
  x: int = load seq;
  ax: int = mul a x;
  axpc: int = add ax c;
  next: int = div axpc m;
  next: int = mul next m;
  next: int = sub axpc next;
  store seq next;
  val: int = div next max;
  val: int = mul val max;
  val: int = sub next val;
  ret val;
}

# Generates a random array of length `size`
@randarray(size: int, rng: ptr<int>) : ptr<int> {
  arr: ptr<int> = alloc size;
  i: int = const 0;
  max: int = const 1000;
  one: int = const 1;
.loop:
  cond: bool = lt i size;
  br cond .body .done;
.body:
  val: int = call @rand rng max;
  loc: ptr<int> = ptradd arr i;
  store loc val;
.loop_end:
  i: int = add i one;
  jmp .loop;
.done:
  ret arr;
}

# Prints an array
@printarray(size: int, arr: ptr<int>) {
  i: int = const 0;
  one: int = const 1;
.loop:
  cond: bool = lt i size;
  br cond .body .done;
.body:
  loc: ptr<int> = ptradd arr i;
  val: int = load loc;
  print val;
.loop_end:
  i: int = add i one;
  jmp .loop;
.done:
  ret;
}

# end of copied section

# Swap two values
@swap(loc1: ptr<int>, loc2: ptr<int>) {
  x: int = load loc1;
  y: int = load loc2;
  store loc2 x;
  store loc1 y;
}

# Put first element in its correct position
@partition(size: int, arr: ptr<int>) : int {
  one: int = const 1;
  k: int = sub size one;
  loc: ptr<int> = ptradd arr k;
  pivot: int = load loc;
  i: int = const 0;
  j: int = const 0;
.loop:
  cond: bool = lt j k;
  br cond .body .done;
.body:
  loc2: ptr<int> = ptradd arr j;
  elem: int = load loc2;
  wrong: bool = lt elem pivot;
  br wrong .swap .end;
.swap:
  loc1: ptr<int> = ptradd arr i;
  call @swap loc1 loc2;
  i: int = add i one;
.end:
  j: int = add j one;
  jmp .loop;
.done:
  loc1: ptr<int> = ptradd arr i;
  call @swap loc1 loc;
  ret i;
}

# Sorts an array
@quicksort(size: int, arr: ptr<int>) {
  one: int = const 1;
  tiny: bool = le size one;
  br tiny .done .body;
.body:
  p: int = call @partition size arr;
  call @quicksort p arr;
  i: int = add p one;
  n: int = sub size i;
  right: int = ptradd arr i;
  call @quicksort n right;
.done:
  ret;
}

# ARGS: 42, 49
@main(size: int, seed: int) {
  one: int = const 1;
  rng: ptr<int> = alloc one;
  store rng seed;
  arr: ptr<int> = call @randarray size rng;
  call @printarray size arr;
  call @quicksort size arr;
  print;
  call @printarray size arr;
  free arr;
  free rng;
  ret;
}
